#!/bin/bash

## You can change or add values on these variables
S_SOFT_TO_INSTALL=('git' 'emacs' 'inkscape' 'blender' 'freecad' 'arduino' 'fish' 'octave' 'fritzing') # 'squid' 'grbl' 'jeedom' 'atom' 'R')
S_WIFI_PASSWORD="password"
S_WIFI_USER="username"

## Don't touch from here to the end
S_CRONTAB_EXIST=0
S_NAME="cohabitdbinstall.sh"
S_USER="$(whoami)"
S_POSITION="$(pwd)"
S_HOME_DIR="/home/$S_USER"
S_AUTOSTART_DIR="$S_HOME_DIR/.config/autostart"
S_TEMP_DIR="$S_HOME_DIR/.DL_TMP"
S_TEMP_FILE="$S_TEMP_DIR/TEMP_FILE"
S_TEMP_FILE2="$S_TEMP_DIR/TEMP_FILE2"
S_BIN_DIR="$S_HOME_DIR/.bin"
S_CON_SCRIPT_NAME="unix_putty"
S_BASH_SOURCE=".bashrc"

## Reboot stage part
S_DESKTOP_FILE="$S_AUTOSTART_DIR/cohabitdbinstall.desktop"
S_DESKTOP_TMP_FILE="$S_TEMP_DIR/cohabitdbinstall.desktop"
S_CRON_CMD="$S_TEMP_DIR/$S_NAME s2"
S_CRONTAB="$S_TEMP_DIR/debianInstallCrontab"

S_STR_BUFFER=""
S_BASH_SOURCE_MOD_MSG="########## GENERATED BY THE FABLAB'S INSTALLATION SCRIPT ##########"
S_BASH_SOURCE_MOD_MSG_END="################## END OF FABLAB'S MODIFICATION ###################"
S_EMACS_ALIAS="alias ne='emacs -nw'"

## Enable expand aliases for the script
shopt -s expand_aliases
alias echo='/bin/echo -e'

print_warning()
{
  if [ $# -gt 0 ]; then
    echo "\e[35m\e[1m\e[4mWARNING !\e[24m\e[21m\e[93m $1\e[39m"
  fi
}

print_error()
{
  if [ $# -gt 0 ]; then
    (>&2 echo "\e[1m\e[4m\e[91mERROR:\e[24m\e[21m $1\e[39m")
    exit 1
  fi
}

print_log()
{
  b=0
  if [ $# -gt 0 ]; then
    if [ $# -gt 1 ]; then
      for v in "$@"; do
        if [ $b -eq 0 ]; then
          echo -n "\e[37m$v\e[39m"
          b=1
        elif [ $b -eq 1 ]; then
          echo -n "\e[94m'\e[2m$v\e[22m'\e[39m"
          b=0
        fi
      done
    else
      echo -n "\e[37m$1\e[39m"
    fi
  fi
}

print_green()
{
  if [ $# -gt 0 ]; then
    echo "\e[1m\e[32m$1\e[39m\e[21m"
  fi
}

## Prevent from running the script with sudo rights
check_root()
{
  if [ "$UID" -eq 0 ]; then
    print_error "\e[1m\e[4m\e[91mDon't run this as sudo !\e[24m\e[21m\n  We will ask for root password if needed."
    #echo "\e[1m\e[4m\e[91mDon't run this as sudo !\e[24m\e[21m\n  We will ask for root password if needed.\e[39m"
    #exit
  fi
}

## Check for internet network access
check_for_network_access()
{
  case "$(curl -s --max-time 2 -I http://x.org/ | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
    [23])
    if ping -q -c 1 -W 1 x.org >/dev/null; then
      CONNEXION=1
    else
      print_error "You need to be connected to internet to run this script !"
      #(>&2 echo "\e[1m\e[4m\e[91merror:\e[24m\e[21m You need to be connected to internet to run this script !\e[39m")
    fi;;
    *)
    print_error "You need to be connected to internet to run this script !"
    #(>&2 echo "\e[1m\e[4m\e[91merror:\e[24m\e[21m You need to be connected to internet to run this script !\e[39m")
    ;;
  esac
}

initialize_temporary_dir()
{
  mkdir $S_TEMP_DIR 2> /dev/null
  # && echo -n "\e[37mCreating temporary directory \e[94m'\e[2m$S_TEMP_DIR/\e[22m'\e[37m...\e[39m"
  print_log "Creating temporary directory " "$S_TEMP_DIR" "... "
  cp -rf $S_POSITION/$0 $S_TEMP_DIR/$S_NAME
  print_green "Done"
}

## Create the ~/.bin directory
create_bin()
{
  #echo -n "\e[37mCreating bin directory \e[94m'\e[2m$S_BIN_DIR/\e[22m'\e[37m...\e[39m"
  print_log "Creating bin directory " "$S_BIN_DIR" "... "
  mkdir -p $S_BIN_DIR
  print_green "Done"
}

## Create the ssh connexion script (unix_putty) and make it executable
create_con_script()
{
  create_bin
  #echo -n "\e[37mCreating connexion script \e[94m'\e[2m$S_CON_SCRIPT_NAME\e[22m'\e[37m...\e[39m"
  print_log "Creating connexion script " $S_CON_SCRIPT_NAME "... "
  echo "#!/bin/bash\nif [ \$# -eq 0 ]; then\n    ssh fablab1@fw\nelif [[ \$1 == \"--auto-log\" ]]; then\n    sshpass -p $S_WIFI_PASSWORD ssh $S_WIFI_USER@fw\nelse\n    ssh fablab1@fw\nfi" > $S_BIN_DIR/$S_CON_SCRIPT_NAME
  chmod 755 $S_BIN_DIR/$S_CON_SCRIPT_NAME
  #print_green "Done"
  print_green "Done"
}

## Function to edit the ~/.bashrc file
edit_bashrc()
{
  #echo -n "\e[37mEditing \e[94m~/.bashrc\e[37m file...\e[39m"
  print_log "Editing " "~/.bashrc" " file... "
  ## Activate the 'll' and 'la' aliases in ~/.bashrc file
  S_STR_BUFFER="\n$S_BASH_SOURCE_MOD_MSG\n\n$S_EMACS_ALIAS\nexport PATH=\$PATH:$S_BIN_DIR/\n\n$S_BASH_SOURCE_MOD_MSG_END\n"
  cat $S_HOME_DIR/$S_BASH_SOURCE 2> /dev/null | sed -e "s/#alias ll='ls -l'/alias ll='ls -l'/g" 2> /dev/null | sed -e "s/#alias la='ls -A'/alias la='ls -A'/g" > $S_TEMP_FILE 2> /dev/null

  if [ -s $S_TEMP_FILE ]; then
    ## Check if the file is already modified
    if grep -q "$S_BASH_SOURCE_MOD_MSG" "$S_TEMP_FILE"; then
      #echo "\e[1m\e[32mAlready modified\e[39m\e[21m"
      print_green "Already modified"
    else
      ## Add the 'ne' alias for emacs and add the ~/.bin/ directory to the PATH variable
      echo $S_STR_BUFFER >> $S_TEMP_FILE
      ## Apply the changed settings
      mv $S_TEMP_FILE $S_HOME_DIR/$S_BASH_SOURCE 2> /dev/null
      #echo "\e[32mDone\e[39m"
      print_green "Done"
    fi
  else
    print_error "can't find ~/.bashrc file!"
    #(>&2 echo "\e[1m\e[4m\e[91merror:\e[24m\e[21m can't find ~/.bashrc file!\e[39m")
  fi
}

## Update and upgrade the installed packages
update_packages()
{
  print_log "Updating packages..."
  echo "sudo apt -y update" > $S_TEMP_DIR/apt_update_log
  sudo apt -y update >> $S_TEMP_DIR/apt_update_log 2>&1
  rc=$?
  echo "Return code = $rc\n" >> $S_TEMP_DIR/apt_update_log
  if [ $rc -ne 0 ]; then
    print_error "'sudo apt update' Can't update packages (rc=$rc)! See $S_TEMP_DIR/apt_update_log file for more infos..."
  else
    echo "sudo apt -y dist-upgrade" >> $S_TEMP_DIR/apt_update_log
    sudo apt -y dist-upgrade >> $S_TEMP_DIR/apt_update_log 2>&1
    rc=$?
    echo "Return code = $rc\n" >> $S_TEMP_DIR/apt_update_log
    if  [ $rc -ne 0 ]; then
      print_error "'sudo apt dist-upgrade' Can't upgrade packages (rc=$rc)! See $S_TEMP_DIR/apt_update_log file for more infos..."
    fi
  fi
  print_green "Done"
}

## Install all the packages in the $S_SOFT_TO_INSTALL array
install_packages()
{
  update_packages
  #echo "\e[37mInstalling packages : \e[94m${S_SOFT_TO_INSTALL[*]}\e[39m"
  print_log "Installing packages : " "${S_SOFT_TO_INSTALL[*]}" "... "
  sudo apt install -y ${S_SOFT_TO_INSTALL[*]} > $S_TEMP_DIR/apt_log 2>&1
  if [ $? -ne 0 ]; then
    print_error "Can't install one or more packages!  See $S_TEMP_DIR/apt_log for more infos..."
  fi
  print_green "Done"
}

prepair_for_restart()
{
  S_DESKTOP_CMD="bash -c \"x-terminal-emulator -e $S_BIN_DIR/$S_CON_SCRIPT_NAME --auto-log && sleep 1 && /bin/bash -c \\\"$S_CRON_CMD; exec /bin/bash\\\"\""
  echo "[Desktop Entry]\nType=Application\nName=Fablab Debian Installer\nExec=$S_DESKTOP_CMD\nTerminal=true" > $S_DESKTOP_TMP_FILE
  chmod 755 $S_DESKTOP_TMP_FILE
  type crontab >/dev/null 2>&1
  S_CRONTAB_EXIST=$?
  if [ -d $S_AUTOSTART_DIR ]; then
    cp $S_DESKTOP_TMP_FILE $S_DESKTOP_FILE
    S_CRONTAB_EXIST=0
  elif [ S_CRONTAB_EXIST -eq 0 ]; then
    S_CRONTAB_EXIST=1
    S_CRONTAB_LIST="$(crontab -u $S_USER -l 2>&1)"
    if [ $? -ne 0 ] && [ "$S_CRONTAB_LIST" = "no crontab for $S_USER" ]; then
      print_log "Creating script crontab in " "$S_CRONTAB" "... "
      touch $S_CRONTAB && crontab -u $S_USER $S_CRONTAB
      print_green "Done"
    fi
    print_log "Adding the script to crontab..."
    (crontab -u $S_USER -l 2> /dev/null ; echo "@reboot sleep 60 && DISPLAY=:0 x-terminal-emulator -e \"$S_BIN_DIR/$S_CON_SCRIPT_NAME --auto-log\" && sleep 5 && DISPLAY=:0 x-terminal-emulator -e /bin/bash -c \"$S_CRON_CMD; exec bash\"") | crontab -u $S_USER -
    print_green "Done"
  else
    S_CRONTAB_EXIST=2
    print_warning "No way of starting up the program after a reboot"
    #echo "\e[95m\e[1m\e[4mWARNING !\e[24m\e[21m\e[91m No way of starting up the program after a reboot.\n You'll have to start it by yourself with the \e[94m'\e[2ms2\e[22m'\e[91m argument!\e[39m"
  fi
}

## Add the user to sudoers and dialout groups
add_user_to_groups()
{
  ## selon la distrib, le group 'dialout' peut être différent
  print_warning "The required password is the root one.\n    It isn't necessarily the same as your session password !"
  #echo "\e[35m\e[1m\e[4mWARNING !\e[24m\e[21m\e[93m The required password is the root one.\n    It isn't necessarily the same as your session password !\e[39m"
  su -l root -c "apt install sshpass && usermod -aG sudo,dialout $S_USER && echo -e \"\\n\\e[32m\\e[4m$S_USER\\e[24m successfully added to \\e[4msudo\\e[24m and \\e[4mdialout\\e[24m groups.\\e[39m\""
  prepair_for_restart
}

## Delete the custom crontab if needed and remove the reboot cron call of this script
remove_startup_call()
{
  type crontab >/dev/null 2>&1
  S_CRONTAB_EXIST=$?
  if [ -d $S_AUTOSTART_DIR ]; then
    #echo "Le dossier d'autostart '$S_AUTOSTART_DIR' existe"
    rm -rf $S_DESKTOP_FILE
  elif [ S_CRONTAB_EXIST -eq 0 ]; then
    print_log "Removing reboot cron call..."
    crontab -u $S_USER -l 2> /dev/null | grep -v "DISPLAY=:0 x-terminal-emulator -e /bin/bash -c \"$S_CRON_CMD; exec bash\"" | crontab -u $S_USER -
    print_green "Done"
    if [ -f $S_CRONTAB ]; then
      S_CRONTAB_LIST="$(crontab -u $S_USER -l 2>&1)"
      if [ $? -eq 0 ]; then
        print_log "Deleting script's crontab " "$S_CRONTAB" "... "
        crontab -u $S_USER -r 2> /dev/null
        print_green "Done"
      fi
      rm -rf $S_CRONTAB
    fi
  fi
}

## Uninstall the esr version of firefox and install the official version instead
install_firefox()
{
  sudo apt remove firefox-esr
  wget https://download-installer.cdn.mozilla.net/pub/firefox/releases/59.0.2/linux-x86_64/fr/firefox-59.0.2.tar.bz2
	mv ./firefox-59.0.2.tar.bz2 $S_TEMP_DIR/firefox.tar.bz2
  sudo tar -xvf $S_TEMP_DIR/firefox.tar.bz2 -C /opt/
}

## install the AppImage version of RepetierHost
install_repetier()
{
  S_REPETIER_DIR="$S_BIN_DIR/RepetierHost"
  S_REPETIER_NAME="RepetierHost.AppImage"
  S_REPETIER_LINK="repetier-host"
	wget http://download.repetier.com/files/host/linux/Repetier-Host-x86_64-2.0.5.AppImage
  mkdir $S_REPETIER_DIR 2> /dev/null
  mv Repetier-Host-x86_64-2.0.5.AppImage $S_REPETIER_DIR/$S_REPETIER_NAME
  chmod 755 $S_REPETIER_DIR/$S_REPETIER_NAME
  ln -sf $S_REPETIER_DIR/$S_REPETIER_NAME $S_REPETIER_LINK
  mv $S_REPETIER_LINK $S_BIN_DIR
}

## Remove the temporary directory with everything in it so the script is clean
remove_temp_dir()
{
  print_log "Removing temporary directory " "$S_TEMP_DIR" "... "
	rm -rf $S_TEMP_DIR
  print_green "Done"
}

## Reboot the system
reboot_stage()
{
  print_log "Rebooting system"
  sleep 1
  print_log "."
  sleep 1
  print_log "."
  sleep 1
  print_log ".\n"
	systemctl reboot
}


update_sources_list()
{
  print_log "Updating sources list " "/etc/apt/sources.list" "... "
  cat > $S_TEMP_DIR/sources.list.temp <<EOF
# Debian Stable, main repository
deb http://httpredir.debian.org/debian/ stable main contrib non-free
deb-src http://httpredir.debian.org/debian/ stable main contrib non-free

# Debian Stable, security updates
deb http://security.debian.org/ stable/updates main contrib non-free
deb-src http://security.debian.org/ stable/updates main contrib non-free

# Updates, previously known as 'volatile'
deb http://httpredir.debian.org/debian/ stable-updates main contrib non-free
deb-src http://httpredir.debian.org/debian/ stable-updates main contrib non-free

# Stable deb-multimedia
# deb https://www.deb-multimedia.org/ stable main non-free
# deb http://www.deb-multimedia.org/ stable-backports main
EOF

#cat $S_TEMP_DIR/sources.list.temp
sudo cp -f $S_TEMP_DIR/sources.list.temp /etc/apt/sources.list
print_green "Done"
}


check_root
check_for_network_access

if [ $# -gt 0 ] && [ $1 == "s2" ]; then ## seconde exec

  remove_startup_call
  sudo chsh -s /bin/bash $S_USER

  update_sources_list
  install_packages
  #install_firefox
  #install_repetier

  update_packages
  sudo apt autoremove
  remove_temp_dir
  #reboot_stage
else ## premiere exec

  initialize_temporary_dir

  create_con_script
  edit_bashrc
  add_user_to_groups
  if [ $S_CRONTAB_EXIST -eq 1 ]; then
    print_warning "The system need to restart.\n  Once restarted, you'll have 60 seconds to log in\n  and wait for the script to continue the installation."
    #echo "WARNING ! The system need to restart.\n  Once restarted, you'll have 60 seconds to log in\n  and wait for the script to continue the installation."
    echo -n "Hit enter to confirm you read this :"
    read
  elif [ $S_CRONTAB_EXIST -eq 2 ]; then
    print_warning "The system need to restart.\n  Once restarted, you'll have to restart this script manually\n  with the 's2' argument!"
    #echo "WARNING ! The system need to restart.\n  Once restarted, you'll have to restart this script manually\n  with the 's2' argument!"
    echo -n "Hit enter to confirm you read this :"
    read
  fi
  reboot_stage
fi
